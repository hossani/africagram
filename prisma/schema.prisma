// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                Int        @id @default(autoincrement())
  firstname         String
  lastname          String
  email             String     @unique
  password          String
  isAdmin           Boolean    @default(false)
  date_creation     DateTime   @default(now())
  date_modification DateTime   @updatedAt
   phoneNumber       String
   otp               String?
  otpExpiration     DateTime?
  profile           Profile?
  posts             Post[]
  aime              Aime[]
  commentaires      Commentaire[]
  following         Follower[] @relation("followingRelation")
  followers         Follower[] @relation("followerRelation")
}

model Profile {
  id                Int        @id @default(autoincrement())
  utilisateur_id     Int        @unique
  sexe              String     @default("")
  pays              String     @default("")
  ville             String     @default("")
  date_creation     DateTime   @default(now())
  date_modification DateTime   @updatedAt
  utilisateur       Utilisateur @relation(fields: [utilisateur_id ], references: [id])
}

model Post {
  id                Int        @id @default(autoincrement())
  utilisateur_id    Int
  caption           String
  date_creation     DateTime   @default(now())
  date_modification DateTime   @updatedAt
  image_url         String     @db.VarChar(255)
  total_likes       Int        @default(0)
  utilisateur       Utilisateur @relation(fields: [utilisateur_id], references: [id])
  aime              Aime[]
  commentaires      Commentaire[]
}

model Aime {
  id                Int        @id @default(autoincrement())
  utilisateur_id    Int
  post_id           Int
  date_creation     DateTime   @default(now())
  utilisateur       Utilisateur @relation(fields: [utilisateur_id], references: [id])
  post              Post        @relation(fields: [post_id], references: [id])
}

model Commentaire {
  id                Int        @id @default(autoincrement())
  utilisateur_id    Int
  post_id           Int
  message           String
  date_creation     DateTime   @default(now())
  utilisateur       Utilisateur @relation(fields: [utilisateur_id], references: [id])
  post              Post        @relation(fields: [post_id], references: [id])
}

model Follower {
  id                Int        @id @default(autoincrement())
  following_id      Int
  follower_id       Int     
  date_creation     DateTime   @default(now())
  following         Utilisateur @relation("followingRelation", fields: [following_id], references: [id])
  follower          Utilisateur @relation("followerRelation", fields: [follower_id], references: [id])
}